/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PokeMarketPlaceInterface extends utils.Interface {
  functions: {
    "acceptBid(uint256,uint256)": FunctionFragment;
    "addNftContractSupport(address)": FunctionFragment;
    "addTokenSupport(address)": FunctionFragment;
    "adminOwner()": FunctionFragment;
    "bids(uint256,uint256)": FunctionFragment;
    "bulkBuy(uint256[],uint256[])": FunctionFragment;
    "buyNow(uint256,uint16)": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "initialize(uint256,address)": FunctionFragment;
    "nftContracts(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "order(uint256)": FunctionFragment;
    "orderNonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeOfferForOrder(uint256,uint16,uint256)": FunctionFragment;
    "placeOrderForSell(uint256,address,uint16,uint256,address,uint256,uint8)": FunctionFragment;
    "platformFees()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPlatformFees(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokensSupport(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawMoney(uint256,address)": FunctionFragment;
    "withdrawRejectBid(uint256,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptBid"
      | "addNftContractSupport"
      | "addTokenSupport"
      | "adminOwner"
      | "bids"
      | "bulkBuy"
      | "buyNow"
      | "cancelOrder"
      | "initialize"
      | "nftContracts"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "order"
      | "orderNonce"
      | "owner"
      | "placeOfferForOrder"
      | "placeOrderForSell"
      | "platformFees"
      | "renounceOwnership"
      | "setPlatformFees"
      | "supportsInterface"
      | "tokensSupport"
      | "transferOwnership"
      | "withdrawMoney"
      | "withdrawRejectBid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addNftContractSupport",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenSupport",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkBuy",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "order",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeOfferForOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrderForSell",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensSupport",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMoney",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRejectBid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNftContractSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adminOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bulkBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "order", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeOfferForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrderForSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRejectBid",
    data: BytesLike
  ): Result;

  events: {
    "BidAccepted(uint256,uint256,uint256)": EventFragment;
    "BidExpired(uint256,uint256)": EventFragment;
    "BidPlaced(uint256,uint256,address,uint16,uint256,uint256)": EventFragment;
    "BidRejected(uint256,uint256)": EventFragment;
    "BidWithdraw(uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NFTBulkBuy(uint256[],uint256[])": EventFragment;
    "OrderCancelled(uint256)": EventFragment;
    "OrderCreated(uint256,uint256,uint256,address,uint16,uint8,uint256,uint256,address,address)": EventFragment;
    "OrderPurchased(uint256,address,uint16)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTBulkBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BidAcceptedEventObject {
  orderId: BigNumber;
  bidId: BigNumber;
  copies: BigNumber;
}
export type BidAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  BidAcceptedEventObject
>;

export type BidAcceptedEventFilter = TypedEventFilter<BidAcceptedEvent>;

export interface BidExpiredEventObject {
  orderId: BigNumber;
  bidId: BigNumber;
}
export type BidExpiredEvent = TypedEvent<
  [BigNumber, BigNumber],
  BidExpiredEventObject
>;

export type BidExpiredEventFilter = TypedEventFilter<BidExpiredEvent>;

export interface BidPlacedEventObject {
  orderId: BigNumber;
  bidIndex: BigNumber;
  bidder: string;
  copies: number;
  pricePerNft: BigNumber;
  bidTime: BigNumber;
}
export type BidPlacedEvent = TypedEvent<
  [BigNumber, BigNumber, string, number, BigNumber, BigNumber],
  BidPlacedEventObject
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export interface BidRejectedEventObject {
  orderId: BigNumber;
  bidId: BigNumber;
}
export type BidRejectedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BidRejectedEventObject
>;

export type BidRejectedEventFilter = TypedEventFilter<BidRejectedEvent>;

export interface BidWithdrawEventObject {
  orderId: BigNumber;
  bidId: BigNumber;
}
export type BidWithdrawEvent = TypedEvent<
  [BigNumber, BigNumber],
  BidWithdrawEventObject
>;

export type BidWithdrawEventFilter = TypedEventFilter<BidWithdrawEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NFTBulkBuyEventObject {
  orderIds: BigNumber[];
  copies: BigNumber[];
}
export type NFTBulkBuyEvent = TypedEvent<
  [BigNumber[], BigNumber[]],
  NFTBulkBuyEventObject
>;

export type NFTBulkBuyEventFilter = TypedEventFilter<NFTBulkBuyEvent>;

export interface OrderCancelledEventObject {
  orderId: BigNumber;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderCreatedEventObject {
  orderId: BigNumber;
  tokenId: BigNumber;
  price: BigNumber;
  seller: string;
  copies: number;
  saleType: number;
  startTime: BigNumber;
  endTime: BigNumber;
  paymentToken: string;
  nftContract: string;
}
export type OrderCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderPurchasedEventObject {
  orderId: BigNumber;
  buyer: string;
  copies: number;
}
export type OrderPurchasedEvent = TypedEvent<
  [BigNumber, string, number],
  OrderPurchasedEventObject
>;

export type OrderPurchasedEventFilter = TypedEventFilter<OrderPurchasedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PokeMarketPlace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PokeMarketPlaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBid(
      orderId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNftContractSupport(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokenSupport(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminOwner(overrides?: CallOverrides): Promise<[string]>;

    bids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, number] & {
        bidder: string;
        copies: number;
        price: BigNumber;
        timestamp: BigNumber;
        status: number;
      }
    >;

    bulkBuy(
      orderIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyNow(
      orderId: PromiseOrValue<BigNumberish>,
      copies: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _platformFees: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nftContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    order(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        copies: number;
        saleType: number;
        startTime: BigNumber;
        endTime: BigNumber;
        paymentToken: string;
        nftContract: string;
      }
    >;

    orderNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeOfferForOrder(
      orderId: PromiseOrValue<BigNumberish>,
      copies: PromiseOrValue<BigNumberish>,
      pricePerNFT: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeOrderForSell(
      tokenId: PromiseOrValue<BigNumberish>,
      nftContract: PromiseOrValue<string>,
      copies: PromiseOrValue<BigNumberish>,
      pricePerNFT: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      saleType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    platformFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformFees(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensSupport(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawMoney(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRejectBid(
      orderId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      isReject: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    orderId: PromiseOrValue<BigNumberish>,
    bidId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNftContractSupport(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokenSupport(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminOwner(overrides?: CallOverrides): Promise<string>;

  bids(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, number] & {
      bidder: string;
      copies: number;
      price: BigNumber;
      timestamp: BigNumber;
      status: number;
    }
  >;

  bulkBuy(
    orderIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyNow(
    orderId: PromiseOrValue<BigNumberish>,
    copies: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _platformFees: PromiseOrValue<BigNumberish>,
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nftContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC1155BatchReceived(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  order(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      number,
      number,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      tokenId: BigNumber;
      price: BigNumber;
      seller: string;
      copies: number;
      saleType: number;
      startTime: BigNumber;
      endTime: BigNumber;
      paymentToken: string;
      nftContract: string;
    }
  >;

  orderNonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeOfferForOrder(
    orderId: PromiseOrValue<BigNumberish>,
    copies: PromiseOrValue<BigNumberish>,
    pricePerNFT: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeOrderForSell(
    tokenId: PromiseOrValue<BigNumberish>,
    nftContract: PromiseOrValue<string>,
    copies: PromiseOrValue<BigNumberish>,
    pricePerNFT: PromiseOrValue<BigNumberish>,
    paymentToken: PromiseOrValue<string>,
    endTime: PromiseOrValue<BigNumberish>,
    saleType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  platformFees(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformFees(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensSupport(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawMoney(
    amount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRejectBid(
    orderId: PromiseOrValue<BigNumberish>,
    bidId: PromiseOrValue<BigNumberish>,
    isReject: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      orderId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNftContractSupport(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenSupport(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    adminOwner(overrides?: CallOverrides): Promise<string>;

    bids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, number] & {
        bidder: string;
        copies: number;
        price: BigNumber;
        timestamp: BigNumber;
        status: number;
      }
    >;

    bulkBuy(
      orderIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    buyNow(
      orderId: PromiseOrValue<BigNumberish>,
      copies: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _platformFees: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nftContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    order(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        copies: number;
        saleType: number;
        startTime: BigNumber;
        endTime: BigNumber;
        paymentToken: string;
        nftContract: string;
      }
    >;

    orderNonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeOfferForOrder(
      orderId: PromiseOrValue<BigNumberish>,
      copies: PromiseOrValue<BigNumberish>,
      pricePerNFT: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrderForSell(
      tokenId: PromiseOrValue<BigNumberish>,
      nftContract: PromiseOrValue<string>,
      copies: PromiseOrValue<BigNumberish>,
      pricePerNFT: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      saleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    platformFees(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPlatformFees(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensSupport(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMoney(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRejectBid(
      orderId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      isReject: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BidAccepted(uint256,uint256,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidId?: null,
      copies?: null
    ): BidAcceptedEventFilter;
    BidAccepted(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidId?: null,
      copies?: null
    ): BidAcceptedEventFilter;

    "BidExpired(uint256,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidId?: null
    ): BidExpiredEventFilter;
    BidExpired(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidId?: null
    ): BidExpiredEventFilter;

    "BidPlaced(uint256,uint256,address,uint16,uint256,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidIndex?: null,
      bidder?: null,
      copies?: null,
      pricePerNft?: null,
      bidTime?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidIndex?: null,
      bidder?: null,
      copies?: null,
      pricePerNft?: null,
      bidTime?: null
    ): BidPlacedEventFilter;

    "BidRejected(uint256,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidId?: null
    ): BidRejectedEventFilter;
    BidRejected(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidId?: null
    ): BidRejectedEventFilter;

    "BidWithdraw(uint256,uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidId?: null
    ): BidWithdrawEventFilter;
    BidWithdraw(
      orderId?: PromiseOrValue<BigNumberish> | null,
      bidId?: null
    ): BidWithdrawEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NFTBulkBuy(uint256[],uint256[])"(
      orderIds?: null,
      copies?: null
    ): NFTBulkBuyEventFilter;
    NFTBulkBuy(orderIds?: null, copies?: null): NFTBulkBuyEventFilter;

    "OrderCancelled(uint256)"(
      orderId?: PromiseOrValue<BigNumberish> | null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      orderId?: PromiseOrValue<BigNumberish> | null
    ): OrderCancelledEventFilter;

    "OrderCreated(uint256,uint256,uint256,address,uint16,uint8,uint256,uint256,address,address)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      seller?: null,
      copies?: null,
      saleType?: null,
      startTime?: null,
      endTime?: null,
      paymentToken?: null,
      nftContract?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      seller?: null,
      copies?: null,
      saleType?: null,
      startTime?: null,
      endTime?: null,
      paymentToken?: null,
      nftContract?: null
    ): OrderCreatedEventFilter;

    "OrderPurchased(uint256,address,uint16)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      buyer?: null,
      copies?: null
    ): OrderPurchasedEventFilter;
    OrderPurchased(
      orderId?: PromiseOrValue<BigNumberish> | null,
      buyer?: null,
      copies?: null
    ): OrderPurchasedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    acceptBid(
      orderId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNftContractSupport(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokenSupport(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminOwner(overrides?: CallOverrides): Promise<BigNumber>;

    bids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkBuy(
      orderIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyNow(
      orderId: PromiseOrValue<BigNumberish>,
      copies: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _platformFees: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nftContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    order(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderNonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeOfferForOrder(
      orderId: PromiseOrValue<BigNumberish>,
      copies: PromiseOrValue<BigNumberish>,
      pricePerNFT: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeOrderForSell(
      tokenId: PromiseOrValue<BigNumberish>,
      nftContract: PromiseOrValue<string>,
      copies: PromiseOrValue<BigNumberish>,
      pricePerNFT: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      saleType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    platformFees(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformFees(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensSupport(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawMoney(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRejectBid(
      orderId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      isReject: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      orderId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNftContractSupport(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokenSupport(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkBuy(
      orderIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyNow(
      orderId: PromiseOrValue<BigNumberish>,
      copies: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _platformFees: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nftContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    order(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOfferForOrder(
      orderId: PromiseOrValue<BigNumberish>,
      copies: PromiseOrValue<BigNumberish>,
      pricePerNFT: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeOrderForSell(
      tokenId: PromiseOrValue<BigNumberish>,
      nftContract: PromiseOrValue<string>,
      copies: PromiseOrValue<BigNumberish>,
      pricePerNFT: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      saleType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    platformFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFees(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensSupport(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMoney(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRejectBid(
      orderId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      isReject: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
