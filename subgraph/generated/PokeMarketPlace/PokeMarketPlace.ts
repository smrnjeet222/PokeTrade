// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BidAccepted extends ethereum.Event {
  get params(): BidAccepted__Params {
    return new BidAccepted__Params(this);
  }
}

export class BidAccepted__Params {
  _event: BidAccepted;

  constructor(event: BidAccepted) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get copies(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BidExpired extends ethereum.Event {
  get params(): BidExpired__Params {
    return new BidExpired__Params(this);
  }
}

export class BidExpired__Params {
  _event: BidExpired;

  constructor(event: BidExpired) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BidPlaced extends ethereum.Event {
  get params(): BidPlaced__Params {
    return new BidPlaced__Params(this);
  }
}

export class BidPlaced__Params {
  _event: BidPlaced;

  constructor(event: BidPlaced) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get copies(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get pricePerNft(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get bidTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class BidRejected extends ethereum.Event {
  get params(): BidRejected__Params {
    return new BidRejected__Params(this);
  }
}

export class BidRejected__Params {
  _event: BidRejected;

  constructor(event: BidRejected) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BidWithdraw extends ethereum.Event {
  get params(): BidWithdraw__Params {
    return new BidWithdraw__Params(this);
  }
}

export class BidWithdraw__Params {
  _event: BidWithdraw;

  constructor(event: BidWithdraw) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NFTBulkBuy extends ethereum.Event {
  get params(): NFTBulkBuy__Params {
    return new NFTBulkBuy__Params(this);
  }
}

export class NFTBulkBuy__Params {
  _event: NFTBulkBuy;

  constructor(event: NFTBulkBuy) {
    this._event = event;
  }

  get orderIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get copies(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get copies(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get saleType(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get startTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get nftContract(): Address {
    return this._event.parameters[9].value.toAddress();
  }
}

export class OrderPurchased extends ethereum.Event {
  get params(): OrderPurchased__Params {
    return new OrderPurchased__Params(this);
  }
}

export class OrderPurchased__Params {
  _event: OrderPurchased;

  constructor(event: OrderPurchased) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get copies(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PokeMarketPlace__bidsResult {
  value0: Address;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: i32;

  constructor(
    value0: Address,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }

  getBidder(): Address {
    return this.value0;
  }

  getCopies(): i32 {
    return this.value1;
  }

  getPrice(): BigInt {
    return this.value2;
  }

  getTimestamp(): BigInt {
    return this.value3;
  }

  getStatus(): i32 {
    return this.value4;
  }
}

export class PokeMarketPlace__orderResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: i32;
  value4: i32;
  value5: BigInt;
  value6: BigInt;
  value7: Address;
  value8: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: i32,
    value4: i32,
    value5: BigInt,
    value6: BigInt,
    value7: Address,
    value8: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getSeller(): Address {
    return this.value2;
  }

  getCopies(): i32 {
    return this.value3;
  }

  getSaleType(): i32 {
    return this.value4;
  }

  getStartTime(): BigInt {
    return this.value5;
  }

  getEndTime(): BigInt {
    return this.value6;
  }

  getPaymentToken(): Address {
    return this.value7;
  }

  getNftContract(): Address {
    return this.value8;
  }
}

export class PokeMarketPlace extends ethereum.SmartContract {
  static bind(address: Address): PokeMarketPlace {
    return new PokeMarketPlace("PokeMarketPlace", address);
  }

  adminOwner(): Address {
    let result = super.call("adminOwner", "adminOwner():(address)", []);

    return result[0].toAddress();
  }

  try_adminOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("adminOwner", "adminOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bids(param0: BigInt, param1: BigInt): PokeMarketPlace__bidsResult {
    let result = super.call(
      "bids",
      "bids(uint256,uint256):(address,uint16,uint256,uint256,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new PokeMarketPlace__bidsResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32()
    );
  }

  try_bids(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<PokeMarketPlace__bidsResult> {
    let result = super.tryCall(
      "bids",
      "bids(uint256,uint256):(address,uint16,uint256,uint256,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PokeMarketPlace__bidsResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32()
      )
    );
  }

  nftContracts(param0: Address): boolean {
    let result = super.call("nftContracts", "nftContracts(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_nftContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("nftContracts", "nftContracts(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  order(param0: BigInt): PokeMarketPlace__orderResult {
    let result = super.call(
      "order",
      "order(uint256):(uint256,uint256,address,uint16,uint8,uint256,uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PokeMarketPlace__orderResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toAddress()
    );
  }

  try_order(param0: BigInt): ethereum.CallResult<PokeMarketPlace__orderResult> {
    let result = super.tryCall(
      "order",
      "order(uint256):(uint256,uint256,address,uint16,uint8,uint256,uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PokeMarketPlace__orderResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toAddress()
      )
    );
  }

  orderNonce(): BigInt {
    let result = super.call("orderNonce", "orderNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_orderNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("orderNonce", "orderNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFees(): BigInt {
    let result = super.call("platformFees", "platformFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFees", "platformFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokensSupport(param0: Address): boolean {
    let result = super.call("tokensSupport", "tokensSupport(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_tokensSupport(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokensSupport",
      "tokensSupport(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AcceptBidCall extends ethereum.Call {
  get inputs(): AcceptBidCall__Inputs {
    return new AcceptBidCall__Inputs(this);
  }

  get outputs(): AcceptBidCall__Outputs {
    return new AcceptBidCall__Outputs(this);
  }
}

export class AcceptBidCall__Inputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AcceptBidCall__Outputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }
}

export class AddNftContractSupportCall extends ethereum.Call {
  get inputs(): AddNftContractSupportCall__Inputs {
    return new AddNftContractSupportCall__Inputs(this);
  }

  get outputs(): AddNftContractSupportCall__Outputs {
    return new AddNftContractSupportCall__Outputs(this);
  }
}

export class AddNftContractSupportCall__Inputs {
  _call: AddNftContractSupportCall;

  constructor(call: AddNftContractSupportCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddNftContractSupportCall__Outputs {
  _call: AddNftContractSupportCall;

  constructor(call: AddNftContractSupportCall) {
    this._call = call;
  }
}

export class AddTokenSupportCall extends ethereum.Call {
  get inputs(): AddTokenSupportCall__Inputs {
    return new AddTokenSupportCall__Inputs(this);
  }

  get outputs(): AddTokenSupportCall__Outputs {
    return new AddTokenSupportCall__Outputs(this);
  }
}

export class AddTokenSupportCall__Inputs {
  _call: AddTokenSupportCall;

  constructor(call: AddTokenSupportCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTokenSupportCall__Outputs {
  _call: AddTokenSupportCall;

  constructor(call: AddTokenSupportCall) {
    this._call = call;
  }
}

export class BulkBuyCall extends ethereum.Call {
  get inputs(): BulkBuyCall__Inputs {
    return new BulkBuyCall__Inputs(this);
  }

  get outputs(): BulkBuyCall__Outputs {
    return new BulkBuyCall__Outputs(this);
  }
}

export class BulkBuyCall__Inputs {
  _call: BulkBuyCall;

  constructor(call: BulkBuyCall) {
    this._call = call;
  }

  get orderIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BulkBuyCall__Outputs {
  _call: BulkBuyCall;

  constructor(call: BulkBuyCall) {
    this._call = call;
  }
}

export class BuyNowCall extends ethereum.Call {
  get inputs(): BuyNowCall__Inputs {
    return new BuyNowCall__Inputs(this);
  }

  get outputs(): BuyNowCall__Outputs {
    return new BuyNowCall__Outputs(this);
  }
}

export class BuyNowCall__Inputs {
  _call: BuyNowCall;

  constructor(call: BuyNowCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get copies(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class BuyNowCall__Outputs {
  _call: BuyNowCall;

  constructor(call: BuyNowCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _platformFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PlaceOfferForOrderCall extends ethereum.Call {
  get inputs(): PlaceOfferForOrderCall__Inputs {
    return new PlaceOfferForOrderCall__Inputs(this);
  }

  get outputs(): PlaceOfferForOrderCall__Outputs {
    return new PlaceOfferForOrderCall__Outputs(this);
  }
}

export class PlaceOfferForOrderCall__Inputs {
  _call: PlaceOfferForOrderCall;

  constructor(call: PlaceOfferForOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get copies(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get pricePerNFT(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PlaceOfferForOrderCall__Outputs {
  _call: PlaceOfferForOrderCall;

  constructor(call: PlaceOfferForOrderCall) {
    this._call = call;
  }
}

export class PlaceOrderForSellCall extends ethereum.Call {
  get inputs(): PlaceOrderForSellCall__Inputs {
    return new PlaceOrderForSellCall__Inputs(this);
  }

  get outputs(): PlaceOrderForSellCall__Outputs {
    return new PlaceOrderForSellCall__Outputs(this);
  }
}

export class PlaceOrderForSellCall__Inputs {
  _call: PlaceOrderForSellCall;

  constructor(call: PlaceOrderForSellCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get copies(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get pricePerNFT(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get endTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get saleType(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class PlaceOrderForSellCall__Outputs {
  _call: PlaceOrderForSellCall;

  constructor(call: PlaceOrderForSellCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPlatformFeesCall extends ethereum.Call {
  get inputs(): SetPlatformFeesCall__Inputs {
    return new SetPlatformFeesCall__Inputs(this);
  }

  get outputs(): SetPlatformFeesCall__Outputs {
    return new SetPlatformFeesCall__Outputs(this);
  }
}

export class SetPlatformFeesCall__Inputs {
  _call: SetPlatformFeesCall;

  constructor(call: SetPlatformFeesCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPlatformFeesCall__Outputs {
  _call: SetPlatformFeesCall;

  constructor(call: SetPlatformFeesCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawMoneyCall extends ethereum.Call {
  get inputs(): WithdrawMoneyCall__Inputs {
    return new WithdrawMoneyCall__Inputs(this);
  }

  get outputs(): WithdrawMoneyCall__Outputs {
    return new WithdrawMoneyCall__Outputs(this);
  }
}

export class WithdrawMoneyCall__Inputs {
  _call: WithdrawMoneyCall;

  constructor(call: WithdrawMoneyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawMoneyCall__Outputs {
  _call: WithdrawMoneyCall;

  constructor(call: WithdrawMoneyCall) {
    this._call = call;
  }
}

export class WithdrawRejectBidCall extends ethereum.Call {
  get inputs(): WithdrawRejectBidCall__Inputs {
    return new WithdrawRejectBidCall__Inputs(this);
  }

  get outputs(): WithdrawRejectBidCall__Outputs {
    return new WithdrawRejectBidCall__Outputs(this);
  }
}

export class WithdrawRejectBidCall__Inputs {
  _call: WithdrawRejectBidCall;

  constructor(call: WithdrawRejectBidCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isReject(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawRejectBidCall__Outputs {
  _call: WithdrawRejectBidCall;

  constructor(call: WithdrawRejectBidCall) {
    this._call = call;
  }
}
